version: 2.1

executors:
  macos:
    macos:
      xcode: 15.2.0

orbs:
  ruby: circleci/ruby@2.1.0

commands:
  yarn_install:
    description: Install dependencies using Yarn. This command correctly configures the cache for any number of package.json and yarn.lock files.

    parameters:
      cache_folder:
        description: The path to the yarn cache folder.  Defaults to /tmp/yarn
        type: string
        default: '/tmp/yarn'

    steps:
      - run:
          name: Create cache checksum file
          command: |
            mkdir -p ~/.tmp/checksumfiles
            find . -type f -name 'package.json' -not -path "*node_modules*" -exec cat {} + >> ~/.tmp/checksumfiles/package.json
            find . -type f -name 'yarn.lock' -not -path "*node_modules*" -exec cat {} + >> ~/.tmp/checksumfiles/yarn.lock
      - restore_cache:
          keys:
            - yarn-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ checksum "~/.tmp/checksumfiles/yarn.lock" }}-{{ .Environment.CACHE_VERSION }}
      - run:
          name: Yarn Install
          command: 'export YARN_CACHE_FOLDER=<<parameters.cache_folder>> && yarn install --immutable'
      - save_cache:
          paths:
            - <<parameters.cache_folder>>
          key: yarn-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ checksum "~/.tmp/checksumfiles/yarn.lock" }}-{{ .Environment.CACHE_VERSION }}
  pod_install:
    description: Install CocoaPods dependencies for an iOS project. This command correctly configures the cache for the Pods directory and Podfile.lock.
    parameters:
      pod_install_directory:
        type: string
        default: 'example/ios'
        description: The location of the "ios" directory
    steps:
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-cache-pods-{{ checksum "<<parameters.pod_install_directory>>/Podfile.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-cache-pods'
      - run:
          name: Install CocoaPods
          command: |
            cd <<parameters.pod_install_directory>> && pod install && cd -
      - save_cache:
          paths:
            - <<parameters.pod_install_directory>>/Pods
          key: '{{ .Environment.CACHE_VERSION }}-cache-pods-{{ checksum "<<parameters.pod_install_directory>>/Podfile.lock" }}'
  brew_install_linters:
    description: Install native code linters using Homebrew (ktlint, clang-format), and cache the Homebrew cache.
    steps:
      - restore_cache:
          key: brew-cache-linters-{{ arch }}-{{ .Environment.CACHE_VERSION }}
      - run:
          name: Installing native code linters
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install ktlint clang-format
      - save_cache:
          paths:
            - ~/Library/Caches/Homebrew
          key: brew-cache-linters-{{ arch }}-{{ .Environment.CACHE_VERSION }}
  android_sdk_install:
    description: Install Android SDK
    steps:
      - restore_cache:
          key: brew-cache-android-commandlinetools-{{ arch }}-{{ .Environment.CACHE_VERSION }}
      - run:
          name: Installing Android SDK
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask android-commandlinetools
      - run:
          name: Configuring Environment Variables
          command: |
            echo 'export PATH="$PATH:/usr/local/opt/node@18/bin:~/.yarn/bin:~/project/node_modules/.bin:~/project/example/node_modules/.bin"' >> $BASH_ENV
            echo 'export ANDROID_HOME="/usr/local/share/android-commandlinetools"' >> $BASH_ENV
            echo 'export ANDROID_SDK_ROOT="/usr/local/share/android-commandlinetools"' >> $BASH_ENV
            echo 'export PATH="$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH"' >> $BASH_ENV
            echo 'export QEMU_AUDIO_DRV=none' >> $BASH_ENV
            echo 'export JAVA_HOME=$(/usr/libexec/java_home)' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Accepting Android Licenses
          command: yes | sdkmanager --licenses || true
      - save_cache:
          paths:
            - ~/Library/Caches/Homebrew
          key: brew-cache-android-commandlinetools-{{ arch }}-{{ .Environment.CACHE_VERSION }}

jobs:
  checkout_project:
    executor: macos
    steps:
      - checkout
      - ruby/install-deps
      - yarn_install
      - pod_install
      - persist_to_workspace:
          paths: .
          root: .
  lint_sdk:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - brew_install_linters
      - run:
          name: Running SDK linters (Typescript type check, ESLint, Kotlin, ObjC)
          command: bundle exec fastlane lint
  build_sdk:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - android_sdk_install
      - run:
          name: Build SDK
          command: bundle exec fastlane build build_for_distribution:false
  unit_test_sdk:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run Unit Tests
          command: bundle exec fastlane test
  publish_example_apps:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Store Google Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - android_sdk_install
      - run:
          name: Distribute Sample Apps
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            bundle exec fastlane distribute_sample_apps
  release_sdk:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish SDK to NPM
          command: |
            echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
            bundle exec fastlane release
  report_to_jira:
    docker:
      - image: europe-docker.pkg.dev/opnf-management/docker/deployer:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - run:
          name: Report Deployment to Jira
          environment:
            ENVIRONMENT: << parameters.environment >>
          command: /resources/scripts/report-status-to-jira.sh

workflows:
  version: 2
  pull_request_checks:
    jobs:
      - checkout_project:
          filters:
            branches:
              ignore:
                - master
      - lint_sdk:
          requires:
            - checkout_project
      - build_sdk:
          requires:
            - lint_sdk
      - unit_test_sdk:
          requires:
            - build_sdk
  distribute_example_apps:
    jobs:
      - checkout_project:
          filters:
            branches:
              only:
                - master
      - publish_example_apps:
          context: shared-secrets
          requires:
            - checkout_project
      - report_to_jira:
          context: shared-secrets
          environment: staging
          requires:
            - publish_example_apps
  publish_sdk:
    jobs:
      - checkout_project:
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/
      - release_sdk:
          context: shared-secrets
          requires:
            - checkout_project
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/
      - report_to_jira:
          context: shared-secrets
          environment: prod
          requires:
            - release_sdk
