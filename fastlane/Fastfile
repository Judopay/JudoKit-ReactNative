require './helpers'

@derived_data_path = ENV["XCODE_DERIVED_DATA_PATH"] || "#{File.expand_path('..')}/DerivedData"
@environments = ['production']
@fl_output_dir = ENV['FL_OUTPUT_DIR'] || "#{File.expand_path('..')}/fastlane_output"
@sample_apps_dir = "#{File.expand_path('..')}/example"
@sample_apps = [
  SampleApp.new(
    firebase_app_id: {
      production: '1:34238832242:ios:17856b905e693be163eceb'
    },
    path: "#{@sample_apps_dir}/ios",
    platform: 'ios',
    scheme: 'JudoKitReactNativeExample'
  ),
  SampleApp.new(
    firebase_app_id: {
      production: '1:34238832242:android:28f3dda075c60e3d63eceb'
    },
    path: "#{@sample_apps_dir}/android/app",
    platform: 'android',
  ),
]

desc "Cleanup generated files"
lane :clean do
  file_list = [
    # Yarn generated files
    'node_modules',
    'example/node_modules',

    # CocoaPods generated files
    'example/ios/Pods',

    # Fastlane generated files
    'fastlane_output',
    'derived_data',

    # Gradle generated files
    'example/android/build',
    'example/android/app/build',

    # XCode generated files
    'example/ios/build',

    # JS generated bundle
    'lib'
  ]

  UI.message "Removing files: #{file_list}"
  Dir.chdir('..') do
    FileUtils.rm_rf(file_list)
  end
end

desc "Install SDK and Sample App dependencies"
lane :install do
   yarn command: "install --immutable"
end

desc "Lint SDK"
lane :lint do
  Dir.chdir('..') do
    # Lint Android native code
    sh('./scripts/ktlint_format.rb')

    # Lint iOS native code
    sh('./scripts/clang_format.rb')
  end

  # Lint TS code
  yarn command: "typecheck"
  yarn command: "lint"
end

desc "Auto format code"
lane :format do
  Dir.chdir('..') do
    # Format Android native code
    sh('./scripts/ktlint_format.rb format')

    # Format iOS native code
    sh('./scripts/clang_format.rb format')
  end

  # Format TS code
  yarn command: "format"
end

desc "Build SDK"
lane :build do |options|
  yarn command: "clean"
  yarn command: "prepare"
end

desc "Run SDK tests"
lane :test do |options|
  yarn command: "test --maxWorkers=2 --coverage"
end

desc "Publish SDK"
lane :publish do |options|
  yarn command: "clean"
  yarn command: "prepare"
  yarn command: "npm publish"
end

desc "Build Sample Apps"
lane :build_sample_apps do |options|
  @sample_apps.select { |app|
    !options.key?(:platform) || options[:platform] == app.platform
  }.each do |app|
    @environments.select{ |env|
      !options.key?(:environment) || options[:environment] == env
    }.each do |env|
      Fastlane::LaneManager.cruise_lane(app.platform, "build_sample_app", {app: app, environment: env}) if !app.firebase_app_id(environment: env).nil?
    end
  end
end

desc "Run instrumented tests for sample apps on simulators"
lane :test_sample_apps_simulator do |options|
  @sample_apps.select { |app|
    !options.key?(:platform) || options[:platform] == app.platform
  }.each do |app|
    Fastlane::LaneManager.cruise_lane(app.platform, "test_sample_app_simulator", {app: app})
  end
end

desc "Publish Sample Apps"
lane :publish_sample_apps do |options|
  @sample_apps.select { |app|
    !options.key?(:platform) || options[:platform] == app.platform
  }.each do |app|
    @environments.select{ |env|
      !options.key?(:environment) || options[:environment] == env
    }.each do |env|
      Fastlane::LaneManager.cruise_lane(app.platform, "publish_sample_app", {app: app, environment: env}) if !app.firebase_app_id(environment: env).nil?
    end
  end
end

platform :ios do
  desc "[iOS] Build Sample App"
  lane :build_sample_app do |options|
    setup_ci
    app_store_connect_api_key

    cocoapods(podfile: options[:app].podfile)

    bump_build_number(
      app: options[:app],
      environment: options[:environment]
    )
    
    sync_code_signing({
      readonly: true,
      type: 'adhoc',
      app_identifier: get_product_bundle_id(
        project_filepath: options[:app].project,
        scheme: options[:app].scheme
      )
    })

    build_app({
      archive_path: "#{@fl_output_dir}/#{options[:app].scheme}-#{options[:environment]}",
      configuration: 'Release',
      derived_data_path: @derived_data_path,
      output_directory: @fl_output_dir,
      export_method: 'ad-hoc',
      output_name: "#{options[:app].scheme}-#{options[:environment]}.ipa",
      sdk: "iphonesimulator",
      scheme: options[:app].scheme,
      workspace: options[:app].workspace,
    })
  end

  desc "[iOS] Test Sample App"
  lane :test_sample_app do |options|
    run_tests(
      derived_data_path: @derived_data_path,
      ensure_devices_found: true,
      scheme: options[:app].unit_test_scheme,
      skip_build: true,
      workspace: options[:app].workspace,
    )
  end

  desc "[iOS] Run instrumented tests for a sample app on a simulator"
  lane :test_sample_app_simulator do |options|
    Dir.chdir(@sample_apps_dir) do
      yarn(command: "detox:test:ios")
    end
  end


  desc "[iOS] Publish Sample App"
  lane :publish_sample_app do |options|
    if options[:app].firebase_app_id(environment: options[:environment]).nil?
      UI.important("No Firebase App ID found for #{options[:app].scheme} and environment #{options[:environment]}. Won't publish.")
      next
    end

    firebase_app_distribution({
      app: options[:app].firebase_app_id(environment: options[:environment]),
      groups: 'default-testers',
      ipa_path: "#{@fl_output_dir}/#{options[:app].scheme}-#{options[:environment]}.ipa",
      release_notes: changelog_from_git_commits(commits_count: 1),
    })
  end
end

platform :android do
  desc "[Android] Build Sample App"
  lane :build_sample_app do |options|
    latest_release = firebase_app_distribution_get_latest_release(
      app: options[:app].firebase_app_id(environment: options[:environment])
    )

    gradle(
      tasks: ['clean', 'generateCodegenArtifactsFromSchema', 'assembleRelease'],
      project_dir: "#{@sample_apps_dir}/android",
      properties: {
        "android.injected.version.code" => latest_release.nil? ? 1 : latest_release[:buildVersion].to_i + 1,
      }
    )

    options[:app].copy_apks_to_destination(environment: options[:environment], destination: @fl_output_dir)
  end

  desc "[Android] Run instrumented tests for a sample app on a simulator"
  lane :test_sample_app_simulator do |options|
    Dir.chdir(@sample_apps_dir) do
      yarn(command: "detox:test:android")
    end
  end

  desc "[Android] Publish Sample App"
  lane :publish_sample_app do |options|
    if options[:app].firebase_app_id(environment: options[:environment]).nil?
      UI.important("No Firebase App ID found for #{options[:app].app_name} and environment #{options[:environment]}. Won't publish.")
      next
    end
    firebase_app_distribution({
      android_artifact_path: "#{@fl_output_dir}/#{options[:app].release_apk(environment: options[:environment])}",
      app: options[:app].firebase_app_id(environment: options[:environment]),
      groups: 'default-testers',
      release_notes: changelog_from_git_commits(commits_count: 1),
    })
  end
end
