before_all do
  setup_circle_ci
end

desc "Cleanup generated files"
lane :clean do
  file_list = [
    # Yarn generated files
    'node_modules',
    'example/node_modules',

    # CocoaPods generated files
    'example/ios/Pods',

    # Fastlane generated files
    'fastlane_output',
    'derived_data',

    # Gradle generated files
    'example/android/build',
    'example/android/app/build',

    # XCode generated files
    'example/ios/build',

    # JS generated bundle
    'lib']

  UI.message "Removing files: #{file_list}"
  Dir.chdir('..') do
    FileUtils.rm_rf(file_list)
  end
end

desc "Install SDK and Sample App dependencies"
lane :install do
   yarn command: "install --immutable"
end

desc "Lint SDK"
lane :lint do
  Dir.chdir('..') do
    # Lint Android native code
    sh('./scripts/ktlint_format.rb')

    # Lint iOS native code
    sh('./scripts/clang_format.rb')
  end

  # Lint TS code
  yarn command: "typecheck"
  yarn command: "lint"
end

desc "Auto format code"
lane :format do
  Dir.chdir('..') do
    # Format Android native code
    sh('./scripts/ktlint_format.rb format')

    # Format iOS native code
    sh('./scripts/clang_format.rb format')
  end

  # Format TS code
  yarn command: "format"
end

desc "Build SDK"
lane :build do | options |
  yarn command: "clean"
  yarn command: "prepare"

  # Build iOS SDK sample app
  Fastlane::LaneManager.cruise_lane("ios", "build_sample_app", options)
  Fastlane::LaneManager.cruise_lane("android", "build_sample_app", options)
end

desc "Run SDK tests"
lane :test do | options |
  yarn command: "test --maxWorkers=2 --coverage"
end

desc "Release SDK"
lane :release do | options |
  yarn command: "clean"
  yarn command: "prepare"
  yarn command: "npm publish"
end

desc "Distribute Sample Apps"
lane :distribute_sample_apps do | options |
  Fastlane::LaneManager.cruise_lane("ios", "distribute_sample_app", options)
  Fastlane::LaneManager.cruise_lane("android", "distribute_sample_app", options)
end

platform :ios do

  desc "[iOS] Build Sample App"
  lane :build_sample_app do | options |
      build_for_distribution = options[:build_for_distribution].nil? ? true : options[:build_for_distribution]

      sync_code_signing_options = {
        type: 'adhoc',
        app_identifier: 'com.judopay.react-native-sample-app'
      }

      build_app_options = {
        export_method: 'ad-hoc',
        scheme: 'JudoKitReactNativeExample',
        output_name: 'JudoKitReactNativeExample.ipa',
        workspace: './example/ios/JudoKitReactNativeExample.xcworkspace'
      }

      if !build_for_distribution
        build_app_options[:skip_codesigning] = true
        build_app_options[:skip_package_ipa] = true
        build_app_options[:skip_archive] = true
        build_app_options[:configuration] = 'Debug'
      end

      cocoapods(podfile: './example/ios/Podfile')

      if build_for_distribution
        app_store_connect_api_key
        sync_code_signing sync_code_signing_options
      end

      build_app build_app_options
  end

  desc "[iOS] Distribute Sample App"
  lane :distribute_sample_app do | options |

    increment_build_number_options = {
      xcodeproj: './example/ios/JudoKitReactNativeExample.xcodeproj'
    }

    firebase_app_distribution_options = {
      groups: 'default-testers',
      release_notes: changelog_from_git_commits(commits_count: 1)
    }

    firebase_app_distribution_options[:app] = ENV['REACT_NATIVE_IOS_FIREBASE_APP_ID']
    latest_release = firebase_app_distribution_get_latest_release app:firebase_app_distribution_options[:app]
    current_version = latest_release.nil? ? 0 : latest_release[:buildVersion].to_i
    increment_build_number_options[:build_number] = current_version + 1
    increment_build_number increment_build_number_options

    build_sample_app build_for_distribution: true
    firebase_app_distribution firebase_app_distribution_options
  end
end

platform :android do

  desc "[Android] Build Sample App"
  lane :build_sample_app do | options |
    gradle(tasks: ['clean', 'generateCodegenArtifactsFromSchema', 'assembleRelease'], project_dir: './example/android')
  end

  desc "[Android] Distribute Sample App"
  lane :distribute_sample_app do |options|
    firebase_app_distribution_options = {
      app: ENV['REACT_NATIVE_ANDROID_FIREBASE_APP_ID'],
      groups: 'default-testers',
      release_notes: changelog_from_git_commits(commits_count: 1)
    }

    latest_release = firebase_app_distribution_get_latest_release app:firebase_app_distribution_options[:app]
    current_version = latest_release.nil? ? 0 : latest_release[:buildVersion].to_i

    increment_version_code({
     gradle_file_path: './example/android/app/build.gradle',
     version_code: current_version + 1
    })

    build_sample_app
    firebase_app_distribution firebase_app_distribution_options
  end
end
